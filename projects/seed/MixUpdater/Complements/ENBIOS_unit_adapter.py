"""
Created on Wed Sep  6 13:20:18 2023

@author: Alexander de TomÃ¡s (ICTA-UAB)
        -LexPascal
"""
# TODO: adapt


import bw2data.errors
import pandas as pd
import bw2data as bd
from pathlib import Path
from tqdm import tqdm
import random
from projects.seed.MixUpdater.const.const import bw_project,bw_db


bd.projects.set_current(bw_project)            # Select your project
database = bd.Database(bw_db)        # Select your db


# Get paths
processors_path = r'C:\Users\Administrator\PycharmProjects\enbios2\projects\seed\Data\base_file_simplified.xlsx'
calliope = r'C:\Users\Administrator\PycharmProjects\enbios2\projects\seed\Data\flow_out_sum_modified_full_subregions.csv'
# dict_path=data_path /'dict.json'
flow_out_path = r'C:\Users\Administrator\PycharmProjects\enbios2\projects\seed\Data\flow_out_sum_modified_unit_checked_full_subregions.csv'
save_in = r"C:\Users\Administrator\PycharmProjects\enbios2\projects\seed\MixUpdater\Intermediate_data\calliope_function_intermediate_full_subregions.csv"

# Select bw project and db



print(list(bd.databases))


def data_merge(basefile: Path):
    """
    This function reads the Excel "mother file" and generates a dictionary following the structure:

    {technology name :
        { bw_code :,
        conversion factor:,
        }


    """
    df = pd.read_excel(basefile)
    general_dict = {}
    for index, row in tqdm(df.iterrows()):
        name = row['Processor'] + '_' + row['@SimulationCarrier']
        code = row['BW_DB_FILENAME']
        factor = row['@SimulationToEcoinventFactor']

        general_dict[name] = {
            'factor': factor,
            'code': code
        }

    return general_dict


pass


def modify_data(calliope_data: Path, gen_dict: dict):
    """
    This function reads the dictionary generated by data_merge, and the flow_out_sum file.
    Applies some transformations:
        *Multiply the flow_ou_sum by the characterization factor
        *Change the unit according to the conversion

    :param calliope_data: path to the data.csv, flow_out_sum.csv... (output from calliope)
    :param gen_dict:
    :return: Two files.
        *calliope_function.csv : Intermediate file to check units and techs
        * flow_out_sum_modified.csv : Final csv ready for enbios

        Returns a list of techs to apply the following function "check elements"
    """

    df = pd.read_csv(calliope_data, delimiter=',')

    # Create a modified column name to match  the names

    name2 = []
    for index, row in df.iterrows():
        try:
            new_name = str(row['techs']) + '_' + str(row['carriers'])
            name2.append(new_name)
        except TypeError:
            print('Type error found en fila', index)
            print('Fila problematica', row)
            continue
    df['names2'] = name2

    df['new_vals'] = None
    df['Units_new'] = None
    # df['flow_out_sum']=[x.replace(',','.') for x in df['flow_out_sum']]
    df['codes'] = None
    df['names_db'] = None
    for key in gen_dict.keys():
        code = gen_dict[key]['code']

        try:
            activity = database.get_node(code)
            unit = activity['unit']
            act_name = activity['name']

        except bw2data.errors.UnknownObject:
            print(code, 'from activity', key, 'not found')
            unit = "none"
            act_name='unknown'

        for index, row in df.iterrows():
            if str(key) == str(row['names2']):

                factor = (gen_dict[key]['factor'])
                value = float(row['flow_out_sum'])
                new_val = value * factor
                df.at[index, 'codes'] = code
                df.at[index, 'units'] = unit
                df.at[index, 'new_vals'] = new_val
                df.at[index, 'names_db'] = act_name

            else:
                pass
    # General To check
    df.to_csv(save_in, index=False)

    # Prepare an enbios-like file
    cols = ['spores', 'locs', 'techs', 'carriers', 'units', 'new_vals']
    df = df[cols]
    df.rename(columns={'spores': 'scenarios', 'new_vals': 'flow_out_sum'}, inplace=True)

    # new_file name
    # Enbios is throwing some errors due to some empty cells:
    # scenarios -> 0 -> activities -> electrolysis_hydrogen__PRT_1 -> magnitude
    #   value is not a valid float (type=type_error.float)
    # Delete the empty rows to get a first insight of enbios

    # TODO: review
    df.dropna(axis=0, inplace=True)

    df.to_csv(flow_out_path, index=False)

    return name2  # in order to check the tech names



def check_elements(dictionary, lst):
    present_names = []
    absent_names = []

    for name in lst:
        if name in dictionary:
            present_names.append(name)
        else:
            absent_names.append(name)
    present_names = set(present_names)
    absent_names = set(absent_names)

    return present_names, absent_names


def check_units(csv_path):
    """
    Assert if the units included in the csv file are the ones included in the DB
    """
    df = pd.read_csv(csv_path, delimiter=',')
    random_rows = df.sample(n=1000)
    for index, row in random_rows.iterrows():
        code = str(row['codes'])
        try:
            act = database.get_node(code)
        except bd.errors.UnknownObject:
            continue
        unit_df = str(row['units'])
        unit_check = act['unit']
        assert str(unit_df) == unit_check, "Not true"
        print(unit_df, unit_check)

    pass


if __name__ == '__main__':
    a = data_merge(processors_path)  # Generate the dictionary
    names = modify_data(calliope, a)  # Generate the new csv
    present, absent = check_elements(a, names)  # check missing techs
    check_units(save_in)
# present,absent=check_elements(a,list1)


pass
