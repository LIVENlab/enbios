"""
Created on Wed Sep  6 13:20:18 2023

@author: Alexander de Tom√°s (ICTA-UAB)
        -LexPascal
"""
# TODO: adapt


import bw2data.errors
import pandas as pd
pd.options.mode.chained_assignment = None
import bw2data as bd
from pathlib import Path
from tqdm import tqdm

from projects.seed.MixUpdater.const.const import bw_project,bw_db


bd.projects.set_current(bw_project)            # Select your project
database = bd.Database(bw_db)        # Select your db




def data_merge(basefile: Path):
    """
    This function reads the Excel "mother file" and generates a dictionary following the structure:

    {technology name :
        { bw_code :,
        conversion factor:,
        }


    """

    df = pd.read_excel(basefile)
    general_dict = {}
    for index, row in tqdm(df.iterrows()):
        name = row['Processor'] + '_' + row['@SimulationCarrier']
        code = row['BW_DB_FILENAME']
        factor = row['@SimulationToEcoinventFactor']

        general_dict[name] = {
            'factor': factor,
            'code': code
        }

    return general_dict

pass


def modify_data(calliope_data, gen_dict: dict):
    """
    This function reads the dictionary generated by data_merge, and the flow_out_sum file.
    Applies some transformations:
        *Multiply the flow_ou_sum by the characterization factor
        *Change the unit according to the conversion

    :param calliope_data: path to the data.csv, flow_out_sum.csv... (output from calliope)
    :param gen_dict:
    :return: Two files.
        *calliope_function.csv : Intermediate file to check units and techs
        * flow_out_sum_modified.csv : Final csv ready for enbios

        Returns a list of techs to apply the following function "check elements"
    """
    if isinstance(calliope_data,Path):
        try:
            df = pd.read_csv(calliope_data, delimiter=',')

        except FileNotFoundError:
            raise FileNotFoundError(f"File in path {calliope_data} not found")

    elif isinstance(calliope_data, pd.DataFrame):
        df = calliope_data

    # Create a modified column name to match  the names
    print('Preparing to change and adapt the units...')
    name2 = []
    for index, row in df.iterrows():
        try:
            new_name = str(row['techs']) + '_' + str(row['carriers'])
            name2.append(new_name)
        except TypeError:
            print('Type error found en fila', index)
            print('Fila problematica', row)
            continue
    df['names2'] = name2

    df['new_vals'] = None
    df['Units_new'] = None
    # df['flow_out_sum']=[x.replace(',','.') for x in df['flow_out_sum']]
    df['codes'] = None
    df['names_db'] = None
    for key in gen_dict.keys():
        code = gen_dict[key]['code']

        try:
            activity = database.get_node(code)
            unit = activity['unit']
            act_name = activity['name']

        except bw2data.errors.UnknownObject:

            print(f"{code} from activity, {key} not found. Please check your database")
            unit = "none"
            act_name='unknown'
            continue #If activity doesn't exists, do nothing

        for index, row in df.iterrows():
            if str(key) == str(row['names2']):

                factor = (gen_dict[key]['factor'])
                value = float(row['flow_out_sum'])
                new_val = value * factor
                df.at[index, 'codes'] = code
                df.at[index, 'units'] = unit
                df.at[index, 'new_vals'] = new_val
                df.at[index, 'names_db'] = act_name

            else:
                pass
    # General To check
    #df.to_csv(save_in, index=False)

    # Prepare an enbios-like file    cols = ['spores', 'locs', 'techs', 'carriers', 'units', 'new_vals']
    cols = ['spores', 'locs', 'techs', 'carriers', 'units', 'new_vals']
    df = df[cols]
    df.rename(columns={'spores': 'scenarios', 'new_vals': 'flow_out_sum'}, inplace=True)


    df.dropna(axis=0, inplace=True)
    print('Units adapted and ready to go')
    return df



def unit_adapter(caliope,basefile):

    merged=data_merge(basefile)
    names=modify_data(caliope,merged)

    return names







